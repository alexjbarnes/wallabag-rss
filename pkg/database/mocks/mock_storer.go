// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/store.go
//
// Generated by this command:
//
//	mockgen -source=pkg/database/store.go -destination=pkg/database/mocks/mock_storer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "wallabag-rss-tool/pkg/models"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
	isgomock struct{}
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// DeleteFeed mocks base method.
func (m *MockStorer) DeleteFeed(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeed indicates an expected call of DeleteFeed.
func (mr *MockStorerMockRecorder) DeleteFeed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeed", reflect.TypeOf((*MockStorer)(nil).DeleteFeed), ctx, id)
}

// GetArticles mocks base method.
func (m *MockStorer) GetArticles(ctx context.Context) ([]models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx)
	ret0, _ := ret[0].([]models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockStorerMockRecorder) GetArticles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockStorer)(nil).GetArticles), ctx)
}

// GetDefaultPollInterval mocks base method.
func (m *MockStorer) GetDefaultPollInterval(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPollInterval", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultPollInterval indicates an expected call of GetDefaultPollInterval.
func (mr *MockStorerMockRecorder) GetDefaultPollInterval(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPollInterval", reflect.TypeOf((*MockStorer)(nil).GetDefaultPollInterval), ctx)
}

// GetFeedByID mocks base method.
func (m *MockStorer) GetFeedByID(ctx context.Context, id int) (*models.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedByID", ctx, id)
	ret0, _ := ret[0].(*models.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedByID indicates an expected call of GetFeedByID.
func (mr *MockStorerMockRecorder) GetFeedByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedByID", reflect.TypeOf((*MockStorer)(nil).GetFeedByID), ctx, id)
}

// GetFeeds mocks base method.
func (m *MockStorer) GetFeeds(ctx context.Context) ([]models.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeds", ctx)
	ret0, _ := ret[0].([]models.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeds indicates an expected call of GetFeeds.
func (mr *MockStorerMockRecorder) GetFeeds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeds", reflect.TypeOf((*MockStorer)(nil).GetFeeds), ctx)
}

// InsertFeed mocks base method.
func (m *MockStorer) InsertFeed(ctx context.Context, feed *models.Feed) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFeed", ctx, feed)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertFeed indicates an expected call of InsertFeed.
func (mr *MockStorerMockRecorder) InsertFeed(ctx, feed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFeed", reflect.TypeOf((*MockStorer)(nil).InsertFeed), ctx, feed)
}

// IsArticleAlreadyProcessed mocks base method.
func (m *MockStorer) IsArticleAlreadyProcessed(ctx context.Context, articleURL string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArticleAlreadyProcessed", ctx, articleURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsArticleAlreadyProcessed indicates an expected call of IsArticleAlreadyProcessed.
func (mr *MockStorerMockRecorder) IsArticleAlreadyProcessed(ctx, articleURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArticleAlreadyProcessed", reflect.TypeOf((*MockStorer)(nil).IsArticleAlreadyProcessed), ctx, articleURL)
}

// MarkFeedInitialSyncCompleted mocks base method.
func (m *MockStorer) MarkFeedInitialSyncCompleted(ctx context.Context, feedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFeedInitialSyncCompleted", ctx, feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFeedInitialSyncCompleted indicates an expected call of MarkFeedInitialSyncCompleted.
func (mr *MockStorerMockRecorder) MarkFeedInitialSyncCompleted(ctx, feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFeedInitialSyncCompleted", reflect.TypeOf((*MockStorer)(nil).MarkFeedInitialSyncCompleted), ctx, feedID)
}

// SaveArticle mocks base method.
func (m *MockStorer) SaveArticle(ctx context.Context, feedID int, article *models.Article, wallabagEntryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveArticle", ctx, feedID, article, wallabagEntryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveArticle indicates an expected call of SaveArticle.
func (mr *MockStorerMockRecorder) SaveArticle(ctx, feedID, article, wallabagEntryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveArticle", reflect.TypeOf((*MockStorer)(nil).SaveArticle), ctx, feedID, article, wallabagEntryID)
}

// UpdateDefaultPollInterval mocks base method.
func (m *MockStorer) UpdateDefaultPollInterval(ctx context.Context, interval int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultPollInterval", ctx, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDefaultPollInterval indicates an expected call of UpdateDefaultPollInterval.
func (mr *MockStorerMockRecorder) UpdateDefaultPollInterval(ctx, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultPollInterval", reflect.TypeOf((*MockStorer)(nil).UpdateDefaultPollInterval), ctx, interval)
}

// UpdateFeed mocks base method.
func (m *MockStorer) UpdateFeed(ctx context.Context, feed *models.Feed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeed", ctx, feed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeed indicates an expected call of UpdateFeed.
func (mr *MockStorerMockRecorder) UpdateFeed(ctx, feed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeed", reflect.TypeOf((*MockStorer)(nil).UpdateFeed), ctx, feed)
}

// UpdateFeedLastFetched mocks base method.
func (m *MockStorer) UpdateFeedLastFetched(ctx context.Context, feedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedLastFetched", ctx, feedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeedLastFetched indicates an expected call of UpdateFeedLastFetched.
func (mr *MockStorerMockRecorder) UpdateFeedLastFetched(ctx, feedID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedLastFetched", reflect.TypeOf((*MockStorer)(nil).UpdateFeedLastFetched), ctx, feedID)
}

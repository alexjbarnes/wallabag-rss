// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/wallabag/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/wallabag/client.go -destination=pkg/wallabag/mocks/mock_clienter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	wallabag "wallabag-rss-tool/pkg/wallabag"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
	isgomock struct{}
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// AddEntry mocks base method.
func (m *MockClienter) AddEntry(ctx context.Context, urlToAdd string) (*wallabag.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntry", ctx, urlToAdd)
	ret0, _ := ret[0].(*wallabag.Entry)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockClienterMockRecorder) AddEntry(ctx, urlToAdd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockClienter)(nil).AddEntry), ctx, urlToAdd)
}

// Authenticate mocks base method.
func (m *MockClienter) Authenticate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx)
	ret0, _ := ret[0].(error)

	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockClienterMockRecorder) Authenticate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockClienter)(nil).Authenticate), ctx)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

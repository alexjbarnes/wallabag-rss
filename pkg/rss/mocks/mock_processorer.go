// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rss/processor.go
//
// Generated by this command:
//
//	mockgen -source=pkg/rss/processor.go -destination=pkg/rss/mocks/mock_processorer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	models "wallabag-rss-tool/pkg/models"
	rss "wallabag-rss-tool/pkg/rss"
)

// MockProcessorer is a mock of Processorer interface.
type MockProcessorer struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorerMockRecorder
	isgomock struct{}
}

// MockProcessorerMockRecorder is the mock recorder for MockProcessorer.
type MockProcessorerMockRecorder struct {
	mock *MockProcessorer
}

// NewMockProcessorer creates a new mock instance.
func NewMockProcessorer(ctrl *gomock.Controller) *MockProcessorer {
	mock := &MockProcessorer{ctrl: ctrl}
	mock.recorder = &MockProcessorerMockRecorder{mock}

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorer) EXPECT() *MockProcessorerMockRecorder {
	return m.recorder
}

// FetchAndParse mocks base method.
func (m *MockProcessorer) FetchAndParse(feedURL string) ([]rss.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndParse", feedURL)
	ret0, _ := ret[0].([]rss.Article)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// FetchAndParse indicates an expected call of FetchAndParse.
func (mr *MockProcessorerMockRecorder) FetchAndParse(feedURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndParse", reflect.TypeOf((*MockProcessorer)(nil).FetchAndParse), feedURL)
}

// FetchAndParseWithSyncOptions mocks base method.
func (m *MockProcessorer) FetchAndParseWithSyncOptions(feedURL string, syncMode models.SyncMode, syncCount *int, syncDateFrom *time.Time) ([]rss.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndParseWithSyncOptions", feedURL, syncMode, syncCount, syncDateFrom)
	ret0, _ := ret[0].([]rss.Article)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// FetchAndParseWithSyncOptions indicates an expected call of FetchAndParseWithSyncOptions.
func (mr *MockProcessorerMockRecorder) FetchAndParseWithSyncOptions(feedURL, syncMode, syncCount, syncDateFrom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndParseWithSyncOptions", reflect.TypeOf((*MockProcessorer)(nil).FetchAndParseWithSyncOptions), feedURL, syncMode, syncCount, syncDateFrom)
}

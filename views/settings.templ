package views

import "strconv"

type SettingsData struct {
	PageData
	WallabagConfigLoaded bool
	DefaultPollInterval  int
}

func getIntervalValue(minutes int) string {
	if minutes >= 1440 && minutes%1440 == 0 {
		return strconv.Itoa(minutes/1440)
	} else if minutes >= 60 && minutes%60 == 0 {
		return strconv.Itoa(minutes/60)
	}
	return strconv.Itoa(minutes)
}

func getIntervalUnit(minutes int) string {
	if minutes >= 1440 && minutes%1440 == 0 {
		return "days"
	} else if minutes >= 60 && minutes%60 == 0 {
		return "hours"
	}
	return "minutes"
}

templ Settings(data SettingsData) {
	@Layout(data.PageData) {
		<div class="container mt-4">
			<h1>Settings</h1>
			<p>Configure application settings, including Wallabag credentials and default polling intervals.</p>
			<div class="card mb-4">
				<div class="card-header">
					Wallabag API Configuration
				</div>
				<div class="card-body">
					<p>Wallabag API credentials are loaded from environment variables. Please ensure the following are set:</p>
					<ul>
						<li><code>WALLABAG_BASE_URL</code></li>
						<li><code>WALLABAG_CLIENT_ID</code></li>
						<li><code>WALLABAG_CLIENT_SECRET</code></li>
						<li><code>WALLABAG_USERNAME</code></li>
						<li><code>WALLABAG_PASSWORD</code></li>
					</ul>
					<p>
						<strong>Current Status:</strong>
						if data.WallabagConfigLoaded {
							<span class="badge bg-success">Loaded</span>
						} else {
							<span class="badge bg-danger">Missing/Incomplete</span>
						}
					</p>
					if !data.WallabagConfigLoaded {
						<div class="alert alert-warning" role="alert">
							Wallabag credentials are not fully configured. Please set the environment variables and restart the application.
						</div>
					}
				</div>
			</div>
			<div class="card mb-4">
				<div class="card-header">
					Default Poll Interval
				</div>
				<div class="card-body">
					<div id="settings-form-container">
						<form id="poll-interval-form" hx-put="/settings/poll-interval" hx-target="#default-poll-interval-display" hx-swap="outerHTML">
							<input type="hidden" name="csrf_token" value={ data.CSRFToken }/>
							<div class="mb-3">
								<label for="defaultPollInterval" class="form-label">Default Poll Interval</label>
								<div class="row">
									<div class="col-md-6">
										<input type="number" class="form-control" id="defaultPollInterval" name="default_poll_interval" value={ getIntervalValue(data.DefaultPollInterval) } min="1" required/>
									</div>
									<div class="col-md-6">
										<select class="form-control" id="defaultPollIntervalUnit" name="default_poll_interval_unit">
											<option value="minutes" if getIntervalUnit(data.DefaultPollInterval) == "minutes" { selected }>Minutes</option>
											<option value="hours" if getIntervalUnit(data.DefaultPollInterval) == "hours" { selected }>Hours</option>
											<option value="days" if getIntervalUnit(data.DefaultPollInterval) == "days" { selected }>Days</option>
										</select>
									</div>
								</div>
							</div>
							<button type="submit" class="btn btn-primary">Save</button>
						</form>
					</div>
					<p class="mt-3">Current Default: <span id="default-poll-interval-display">
						if data.DefaultPollInterval == 1440 {
							1 day
						} else if data.DefaultPollInterval == 60 {
							1 hour
						} else if data.DefaultPollInterval%1440 == 0 {
							{ strconv.Itoa(data.DefaultPollInterval/1440) } days
						} else if data.DefaultPollInterval%60 == 0 {
							{ strconv.Itoa(data.DefaultPollInterval/60) } hours
						} else {
							{ strconv.Itoa(data.DefaultPollInterval) } minutes
						}
					</span></p>
				</div>
			</div>
		</div>
	}
}

